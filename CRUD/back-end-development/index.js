// Import neccessary packages.
const express = require("express");
const mysql = require("mysql");
const cors = require("cors");

// Use express
const app = express();

// Add cors as a middleware function in order to send the request to the server in different domains.
app.use(cors());
app.use(express.json());

// We use mysql for database and we create a new connection by using these credentials.
const db = mysql.createConnection({
  user: "iqytqyg2rqhyhcdr",
  host: "pfw0ltdr46khxib3.cbetxkdyhwsb.us-east-1.rds.amazonaws.com",
  password: "drb9lwh0ba6ynwfh",
  database: "xe8j94tksvqix999",
});

// We respond the GET HTTP request when the user request via this path which the response is the data that we query to the MySQL database. In this case, we display all the user information.
app.get("/", (req, res) => {
  db.query("SELECT * FROM USERS", (err, result) => {
    if (err) {
    } else {
      res.send(result);
    }
  });
});

// We used CreateUser relative path as a POST HTTP request in order to create the user. The data that we received from the client will be stored in the req.body and then we do destructuring. We send the query to the database to create a new user which we don't need to specify the user id becuase it's auto-generated by mySQL server. You might notice that there are 3: the first argument is the query string which contain question marks(?) as placeholder, the second argument is the array which will replace the placeholder, and the third argument is call back function whcih will get access to the error and result.
app.post("/createUser", (req, res) => {
  const { name, address, age, interestedIn } = req.body;

  db.query(
    "INSERT INTO USERS ( name, address, age, interestedIn) VALUES (?,?,?,?)",
    [name, address, age, interestedIn],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send("Values Inserted");
      }
    }
  );
});

// We used update relative path as a PUT HTTP request in order to update the user. We send the query to the database to update a new user base on user's id.
app.put("/update", (req, res) => {
  const { id, name, address, age, interestedIn } = req.body;
  db.query(
    "UPDATE USERS SET name= ? , address =?, age = ? , interestedIn = ?  WHERE id = ?",
    [name, address, age, interestedIn, id],
    (err, result) => {
      if (err) {
        console.log(err);
      } else {
        res.send(result);
      }
    }
  );
});

// We used delete/:id relative path as a DELETE HTTP request in order to delete the user. The data that was send via the path we called the parameter which we can access it by using req.params. We send the query to the database to delete the specified user's id.

app.delete("/delete/:id", (req, res) => {
  const id = req.params.id;
  db.query("DELETE FROM USERS WHERE id = ?", id, (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.send(result);
    }
  });
});

app.listen("3003", () => {
  console.log("Server is running on port 3003");
});
